from blog.models import all_blog_posts
from categories.models import LinkBlock
from django.conf import settings
from django.db import models
from exhibitions.models import ExhibitPage
from hours.models import get_open_hours
from instagram.models import Instagram
from wagtail.admin.panels import FieldPanel, MultiFieldPanel
from wagtail.fields import RichTextField, StreamField
from wagtail.models import Page


class HomePage(Page):
    page_description = "The home page of the site."
    background_image = models.ForeignKey(
        "wagtailimages.Image",
        null=True,
        on_delete=models.PROTECT,
        related_name="+",
        help_text="ideal dimensions are 1440x630px, please optimize image size too!",
    )

    # for search result template
    def _get_image(self):
        return self.background_image

    main_image = property(_get_image)

    image_attribution = RichTextField(features=settings.RICHTEXT_BASIC, blank=True)

    # TODO redo these as StructBlocks with a title, link, & rich text
    services_text = RichTextField(features=settings.RICHTEXT_BASIC, blank=True)
    services_link = StreamField(
        [("link", LinkBlock())],
        blank=True,
    )
    collections_text = RichTextField(features=settings.RICHTEXT_BASIC, blank=True)
    collections_link = StreamField(
        [("link", LinkBlock())],
        blank=True,
    )
    about_us_text = RichTextField(features=settings.RICHTEXT_BASIC, blank=True)
    about_us_link = StreamField(
        [("link", LinkBlock())],
        blank=True,
    )

    # commented out are the actual, allowed subpages but they are singletons &
    # auto generated by migrations so we disable adding them here
    subpage_types = [
        # 'blog.BlogIndex',
        # 'categories.CategoryPage',
        "exhibitions.ExhibitsIndexPage",
    ]

    # don't allow more home pages to be created
    parent_page_types = []

    content_panels = Page.content_panels + [
        FieldPanel("background_image"),
        FieldPanel("image_attribution"),
        MultiFieldPanel(
            [
                FieldPanel("services_text"),
                FieldPanel("services_link"),
                FieldPanel("collections_text"),
                FieldPanel("collections_link"),
                FieldPanel("about_us_text"),
                FieldPanel("about_us_link"),
            ],
            heading="Category Descriptions",
        ),
    ]

    def get_context(self, request):
        context = super(HomePage, self).get_context(request)

        # add latest 2 blog posts as "news items"
        news_items = all_blog_posts()[:2]
        # if we have a featured exhibit, it replaces the second blog post
        featured_exhibit = ExhibitPage.objects.filter(featured=True).last()
        if featured_exhibit:
            news_items[1] = featured_exhibit
        context["news_items"] = news_items
        # pull open hours snippets for today
        context["hours"] = get_open_hours()

        # add instagram
        context["instagram"] = Instagram.objects.last()

        return context
