#!/usr/bin/env fish
if test "$argv[1]" = -h; or test "$argv[1]" = --help; or test "$argv[1]" = help
    echo "Usage: ./docs/release [prod]"
    echo "create and push a release tag that triggers a CI build"
    echo "passing 'prod' creates a production release, otherwise it's staging"
    exit 0
else if test "$argv[1]" = prod; or test "$argv[1]" = production
    # Production release: release-N.N.N pushes to production cluster and creates a semantic
    # version release with a release in GitHub with a summary of changes.
    set PROD_RELEASE true
    set LAST_RELEASE_TAG (git tags | grep 'release-' | sort | tail -n 1)
    set RELEASE_VERSION (string split . $LAST_RELEASE_TAG)
    set RELEASE_VERSION[3] (math $RELEASE_VERSION[3] + 1)
    set NEXT_RELEASE_TAG (string join . $RELEASE_VERSION)

    set LAST_VERSION_TAG (git tags | grep 'v' | sort | tail -n 1)
    while not string match --regex v[0-9]+\.[0-9]+\.[0-9]+ $NEXT_VERSION_TAG
        echo "Enter a v tag with a valid semantic version string like v1.2.3 (vN.N.N)."
        read --prompt-str "The last version was $LAST_VERSION_TAG. What is the new one? " \
            --command "$LAST_VERSION_TAG" NEXT_VERSION_TAG
    end
    git tag $NEXT_VERSION_TAG
else
    # Staging release: ep-full-0.x pushes to staging cluster. No other tags, no release in GH.
    set LATEST_EP_TAG (git tags | grep 'ep-full-0.' | sort | tail -n 1)
    set EP_VERSION (string split . $LATEST_EP_TAG)
    set EP_VERSION[2] (math $EP_VERSION[2] + 1)
    set NEXT_EP_TAG (string join . $EP_VERSION)
    git tag $NEXT_EP_TAG
end

git push
git push --tags

if [ "$PROD_RELEASE" = true ]
    gh release create $NEXT_VERSION_TAG --verify-tag --generate-notes --notes-start-tag $LAST_VERSION_TAG
end
