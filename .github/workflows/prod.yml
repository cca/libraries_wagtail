# git tag prod-build-X -> build docker image
# git tag prod-deploy-X -> build image & deploy to GKE
name: 'Production CD'
on:
  push:
    tags:
      - 'prod-build-*'
      - 'prod-deploy-*'

env:
  GAR_LOCATION: 'us-west2'
  PROJECT_ID: 'cca-web-0'
  REPOSITORY: 'us-west2-docker.pkg.dev/cca-web-0/docker-web'
  IMAGE: 'libraries'
  SERVICE_ACCOUNT: 'libraries-wagtail-gh-actions@cca-web-0.iam.gserviceaccount.com'
  WORKLOAD_IDENTITY_PROVIDER: projects/681601623218/locations/global/workloadIdentityPools/github/providers/libraries-wagtail
  CLUSTER_LOCATION: 'us-west1-b'
  CLUSTER_NAME: 'ccaedu-prod'
  K8S_NAMESPACE: 'lib-production'

jobs:
  build:
    name: 'Setup, Build, and Push Docker image to Artifact Registry'
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      # Configure Workload Identity Federation and generate an access token.
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v3.0.0
        with:
          create_credentials_file: true # Important for Docker auth
          project_id: ${{ env.PROJECT_ID }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          token_format: access_token # Explicitly request OAuth token
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}

      # Configure Docker to use the gcloud credentials
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3.0.1

      # This step is necessary too, google-github-actions/auth is not enough
      - name: Configure Docker to use GCloud auth
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        uses: docker/login-action@v3.5.0
        with:
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.auth_token }}
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # Unique Docker tag like prod-deploy-20-abcd123
      - name: Generate tags
        id: tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}-${SHORT_SHA}"
          else
            VERSION="${SHORT_SHA}"
          fi
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
        shell: bash

      # From https://docs.docker.com/build/ci/github-actions/cache/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Build and push
        uses: docker/build-push-action@v6.18.0
        with:
          cache-to: type=inline
          cache-from: type=registry,ref=${{ env.REPOSITORY }}/${{ env.IMAGE}}:latest
          tags: |
            ${{ env.REPOSITORY }}/${{ env.IMAGE}}:latest
            ${{ env.REPOSITORY }}/${{ env.IMAGE}}:${{ steps.tag.outputs.tag }}
          push: true

  deploy:
    needs: build
    if: startsWith(github.ref_name, 'prod-deploy-')
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Set up Google Cloud Auth
        uses: google-github-actions/auth@v3.0.0
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v3.0.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.CLUSTER_LOCATION }}

      - name: Determine Docker tag
        id: tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}-${SHORT_SHA}"
          else
            VERSION="${SHORT_SHA}"
          fi
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Deploy to GKE
        env:
          # see staging.yaml for needed vars, most are derived from namespace
          IMAGE: ${{ env.REPOSITORY }}/${{ env.IMAGE}}:${{ steps.tag.outputs.tag }}
          # needed in the env for production.yaml
          KUBERNETES_NAMESPACE_OVERWRITE: ${{ env.K8S_NAMESPACE }}
        run: |
          # Ensure namespace exists
          kubectl get namespace ${K8S_NAMESPACE} || kubectl create namespace ${K8S_NAMESPACE}

          # Apply configuration with error checking
          if ! cat kubernetes/production.yaml | envsubst | kubectl apply -f -; then
            echo "Failed to apply Kubernetes configuration"
            exit 1
          fi

          # Wait for deployment to roll out
          kubectl rollout status deployment/app --namespace ${K8S_NAMESPACE} --timeout=300s

      - name: Verify deployment
        run: |
          kubectl wait --for=condition=available deployment/app --namespace ${K8S_NAMESPACE} --timeout=60s
          kubectl get pods --namespace ${K8S_NAMESPACE} --selector app=libraries -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -q true
